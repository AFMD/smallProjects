#!/usr/bin/env python

# an example for fitting a model to complex valued data
# grey@christoforo.net

import numpy as np
import matplotlib.pyplot as plt
from scipy import optimize

# here's the model we'd like to fit to (this returns complex numbers)
model = lambda Rs,Rp,C,w: Rs + Rp*(1-1j*w*C*Rp)/(1+(w*C*Rp)**2)

# here's our best guess for the fit parameters (Rs,Rp,C), these are all real
guess = np.array([20, 1E5, 20E-9])

# here's the data we'll fit, the yData is complex valued, the xData is real
#yData = np.array(df['Zre']) - 1j*np.array(df['-Zim'])
#xData = np.array(df['f'])*2*np.pi
yData = \
np.array([  2.11174264e+01 -1.53453830e+01j,
         2.22799565e+01 -2.65876310e+01j,
         2.44040209e+01 -4.25171925e+01j,
         2.78901426e+01 -6.57225672e+01j,
         3.31413260e+01 -1.00339778e+02j,
         4.01448945e+01 -1.51902432e+02j,
         4.84116133e+01 -2.30120780e+02j,
         5.73268995e+01 -3.51470247e+02j,
         6.21713311e+01 -5.42151391e+02j,
         7.24916728e+01 -8.43790508e+02j,
         8.58765808e+01 -1.31991005e+03j,
         1.04542202e+02 -2.07129709e+03j,
         1.32141084e+02 -3.25433650e+03j,
         1.69647686e+02 -5.10300503e+03j,
         2.30823600e+02 -8.05503382e+03j,
         3.20664332e+02 -1.26776537e+04j,
         4.57898520e+02 -1.99655029e+04j,
         6.61618908e+02 -3.14567336e+04j,
         9.72620400e+02 -4.95844877e+04j,
         1.43858523e+03 -7.83327923e+04j,
         2.20465175e+03 -1.23630380e+05j,
         3.57989351e+03 -1.95060416e+05j,
         6.34518221e+03 -3.07514056e+05j,
         1.08936302e+04 -4.85503074e+05j,
         1.91807243e+04 -7.65805374e+05j,
         3.96517023e+04 -1.20685957e+06j,
         2.10883958e+01 -1.52996260e+01j,
         2.22800143e+01 -2.64398920e+01j,
         2.44475441e+01 -4.23035197e+01j,
         2.79145565e+01 -6.53254434e+01j,
         3.30654040e+01 -9.97154754e+01j,
         3.97797965e+01 -1.50978521e+02j,
         4.76527280e+01 -2.29001530e+02j,
         5.61382534e+01 -3.50242833e+02j,
         6.06309591e+01 -5.41135929e+02j,
         7.08606329e+01 -8.42740439e+02j,
         8.40444066e+01 -1.31941683e+03j,
         1.02648010e+02 -2.07063124e+03j,
         1.29966722e+02 -3.25248305e+03j,
         1.67462532e+02 -5.10237878e+03j,
         2.28778151e+02 -8.05344742e+03j,
         3.16722495e+02 -1.26794099e+04j,
         4.52244738e+02 -1.99684945e+04j,
         6.55142890e+02 -3.14583255e+04j,
         9.68926601e+02 -4.95870243e+04j,
         1.39849900e+03 -7.82906172e+04j,
         2.11738942e+03 -1.23619853e+05j,
         3.36836863e+03 -1.95067172e+05j,
         5.38235501e+03 -3.07497990e+05j,
         9.65748857e+03 -4.85545406e+05j,
         1.75801182e+04 -7.63947267e+05j,
         3.10891135e+04 -1.20812897e+06j,
         2.11183492e+01 -1.52498037e+01j,
         2.23061660e+01 -2.63830889e+01j,
         2.44857260e+01 -4.22394273e+01j,
         2.79448017e+01 -6.52218866e+01j,
         3.30404503e+01 -9.95075894e+01j,
         3.96393632e+01 -1.50668537e+02j,
         4.74410210e+01 -2.28766090e+02j,
         5.57887106e+01 -3.49977416e+02j,
         6.03348688e+01 -5.40898158e+02j,
         7.05307110e+01 -8.42636190e+02j,
         8.39897576e+01 -1.31898842e+03j,
         1.02715552e+02 -2.07038220e+03j,
         1.29833973e+02 -3.25305976e+03j,
         1.67522337e+02 -5.10251425e+03j,
         2.27268279e+02 -8.02744589e+03j,
         3.17114237e+02 -1.26790637e+04j,
         4.51909227e+02 -1.99667667e+04j,
         6.54938066e+02 -3.14613801e+04j,
         9.51424396e+02 -4.95985012e+04j,
         1.38245833e+03 -7.80803000e+04j,
         2.09663453e+03 -1.23580746e+05j,
         3.32776640e+03 -1.95003527e+05j,
         5.57987251e+03 -3.07828750e+05j,
         9.33782101e+03 -4.84871594e+05j,
         1.58830983e+04 -7.63961604e+05j,
         2.97772798e+04 -1.20848400e+06j,
         2.11151633e+01 -1.52658582e+01j,
         2.22928637e+01 -2.63824657e+01j,
         2.44624352e+01 -4.21956643e+01j,
         2.79192955e+01 -6.51508465e+01j,
         3.30312292e+01 -9.94776023e+01j,
         3.96540647e+01 -1.50669716e+02j,
         4.73979738e+01 -2.28748296e+02j,
         5.57569130e+01 -3.50072732e+02j,
         6.03085467e+01 -5.40881599e+02j,
         7.05205696e+01 -8.42604946e+02j,
         8.37918655e+01 -1.31842991e+03j,
         1.02489454e+02 -2.06938681e+03j,
         1.30215301e+02 -3.25310858e+03j,
         1.67616074e+02 -5.10047060e+03j,
         2.27219110e+02 -8.02430879e+03j,
         3.17341191e+02 -1.26724394e+04j,
         4.52643600e+02 -1.99587850e+04j,
         6.53287687e+02 -3.14420935e+04j,
         9.67483624e+02 -4.95800089e+04j,
         1.38875760e+03 -7.82810409e+04j,
         2.10620682e+03 -1.23522104e+05j,
         3.28979871e+03 -1.94855720e+05j,
         5.24497685e+03 -3.07272108e+05j,
         9.39860788e+03 -4.84797785e+05j,
         1.57308670e+04 -7.63278537e+05j,
         2.97515297e+04 -1.20344924e+06j,
         2.11608632e+01 -1.52206533e+01j,
         2.23454931e+01 -2.63456510e+01j,
         2.45141661e+01 -4.21813910e+01j,
         2.79719004e+01 -6.51440107e+01j,
         3.30676218e+01 -9.94430124e+01j,
         3.96539408e+01 -1.50633236e+02j,
         4.74276730e+01 -2.28690010e+02j,
         5.58761482e+01 -3.49997281e+02j,
         6.03568728e+01 -5.39043961e+02j,
         7.07190553e+01 -8.39351129e+02j,
         8.43641269e+01 -1.31749153e+03j,
         1.03604701e+02 -2.06775454e+03j,
         1.31037818e+02 -3.24875420e+03j,
         1.68699151e+02 -5.09594947e+03j,
         2.29693606e+02 -8.04356789e+03j,
         3.20032824e+02 -1.26583463e+04j,
         4.53552059e+02 -1.99339952e+04j,
         6.57335769e+02 -3.14183064e+04j,
         9.52611000e+02 -4.95443442e+04j,
         1.40560856e+03 -7.81834784e+04j,
         2.12782628e+03 -1.23415035e+05j,
         3.36265257e+03 -1.94664501e+05j,
         5.26982464e+03 -3.07212811e+05j,
         9.86134435e+03 -4.84113963e+05j,
         1.62953377e+04 -7.61249595e+05j,
         3.04777522e+04 -1.20493825e+06j])

xData = \
   np.array([  6.28318531e+06,   3.96443860e+06,   2.50139890e+06,
               1.57827332e+06,   9.95822039e+05,   6.28318531e+05,
               3.96443860e+05,   2.50139890e+05,   1.57827332e+05,
               9.95822039e+04,   6.28318531e+04,   3.96443860e+04,
               2.50139890e+04,   1.57827332e+04,   9.95822039e+03,
               6.28318531e+03,   3.96443860e+03,   2.50139890e+03,
               1.57827332e+03,   9.95822039e+02,   6.28318531e+02,
               3.96443860e+02,   2.50139890e+02,   1.57827332e+02,
               9.95822039e+01,   6.28318531e+01,   6.28318531e+06,
               3.96443860e+06,   2.50139890e+06,   1.57827332e+06,
               9.95822039e+05,   6.28318531e+05,   3.96443860e+05,
               2.50139890e+05,   1.57827332e+05,   9.95822039e+04,
               6.28318531e+04,   3.96443860e+04,   2.50139890e+04,
               1.57827332e+04,   9.95822039e+03,   6.28318531e+03,
               3.96443860e+03,   2.50139890e+03,   1.57827332e+03,
               9.95822039e+02,   6.28318531e+02,   3.96443860e+02,
               2.50139890e+02,   1.57827332e+02,   9.95822039e+01,
               6.28318531e+01,   6.28318531e+06,   3.96443860e+06,
               2.50139890e+06,   1.57827332e+06,   9.95822039e+05,
               6.28318531e+05,   3.96443860e+05,   2.50139890e+05,
               1.57827332e+05,   9.95822039e+04,   6.28318531e+04,
               3.96443860e+04,   2.50139890e+04,   1.57827332e+04,
               9.95822039e+03,   6.28318531e+03,   3.96443860e+03,
               2.50139890e+03,   1.57827332e+03,   9.95822039e+02,
               6.28318531e+02,   3.96443860e+02,   2.50139890e+02,
               1.57827332e+02,   9.95822039e+01,   6.28318531e+01,
               6.28318531e+06,   3.96443860e+06,   2.50139890e+06,
               1.57827332e+06,   9.95822039e+05,   6.28318531e+05,
               3.96443860e+05,   2.50139890e+05,   1.57827332e+05,
               9.95822039e+04,   6.28318531e+04,   3.96443860e+04,
               2.50139890e+04,   1.57827332e+04,   9.95822039e+03,
               6.28318531e+03,   3.96443860e+03,   2.50139890e+03,
               1.57827332e+03,   9.95822039e+02,   6.28318531e+02,
               3.96443860e+02,   2.50139890e+02,   1.57827332e+02,
               9.95822039e+01,   6.28318531e+01,   6.28318531e+06,
               3.96443860e+06,   2.50139890e+06,   1.57827332e+06,
               9.95822039e+05,   6.28318531e+05,   3.96443860e+05,
               2.50139890e+05,   1.57827332e+05,   9.95822039e+04,
               6.28318531e+04,   3.96443860e+04,   2.50139890e+04,
               1.57827332e+04,   9.95822039e+03,   6.28318531e+03,
               3.96443860e+03,   2.50139890e+03,   1.57827332e+03,
               9.95822039e+02,   6.28318531e+02,   3.96443860e+02,
               2.50139890e+02,   1.57827332e+02,   9.95822039e+01,
               6.28318531e+01])

# fix up data sorting issue
sortedI = np.argsort(xData)
xData=xData[sortedI]
yData=yData[sortedI]
#TODO: looks like several runs of data collection need to be averaged here

# A will be xData (frequency in rad/s)
# B will be yData (is complex)
# x[0] is Rs
# x[1] is Rp
# x[2] is C
# here's the function that tells the l-m fit algorithm we'll use below how good its guesses are
# given a set of fit parameters, it returns real numbers;
# the distance (in the complex plane) between our model's value (complex) and our measured yData (also complex)
residuals = lambda x,A,B: np.absolute(model(x[0],x[1],x[2],A) - B)
#residuals = lambda x,A,B: model(x[0],x[1],x[2],A) - B
x0 = guess

# set up the l-m optimization
fitArgs = (residuals,x0)
fitKwargs = {}
fitKwargs['jac'] = '2-point'
#fitKwargs['jac'] = 'cs'
#fitKwargs['bounds'] = [(0,0,0),(np.inf,np.inf,np.inf)]
fitKwargs['method'] = 'lm'
#fitKwargs['method'] = 'trf'
#fitKwargs['ftol'] = np.finfo(float).eps
#fitKwargs['xtol'] = np.finfo(float).eps
#fitKwargs['gtol'] = np.finfo(float).eps
fitKwargs['x_scale'] = 'jac'
fitKwargs['loss'] = 'linear'
#fitKwargs['f_scale'] = 1.0
#fitKwargs['diff_step'] = None
#fitKwargs['tr_solver'] = None
#fitKwargs['tr_options'] = {}
fitKwargs['jac_sparsity'] = None
fitKwargs['max_nfev'] = 900000
fitKwargs['verbose'] = 0
fitKwargs['args'] = (xData,yData)
fitKwargs['kwargs'] = {}

# do it!
print('Running...')
optimizeResult = optimize.least_squares(*fitArgs,**fitKwargs)

# display result
print (optimizeResult.message)
params = {}
params['Rs'] = optimizeResult.x[0]
params['Rp'] = optimizeResult.x[1]
params['C'] = optimizeResult.x[2]
print(params)


fig, ax1 = plt.subplots()
ax1.loglog(xData, model(params['Rs'], params['Rp'], params['C'], xData).real, 'b-')
ax1.loglog(xData, yData.real, 'b.')
ax1.set_xlabel('Frequency [rad/s]')
# Make the y-axis label, ticks and tick labels match the line color.
ax1.set_ylabel('Real Part', color='b')
ax1.tick_params('y', colors='b')

ax2 = ax1.twinx()
ax2.loglog(xData, model(params['Rs'], params['Rp'], params['C'], xData).imag, 'r-')
ax2.loglog(xData, yData.imag, 'r.')
ax2.set_ylabel('Imaginary Part', color='r')
ax2.tick_params('y', colors='r')

ax1.set_title('dots for data, lines for fits')
fig.tight_layout()
plt.show()

print('Done')
