%% Import data from text file.
% Script for importing data from the following text file:
%
%    PTB7th-CA1-1_IRR_pix6.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/01/22 15:19:29
clear variables
%% Initialize variables.
filename = 'PTB7th-CA1-1_IRR_pix6.txt';
delimiter = '\t';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r','n','UTF-8');
% Skip the BOM (Byte Order Mark).
fseek(fileID, 3, 'bof');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
FrequencyHz = cell2mat(raw(:, 1));
Z = cell2mat(raw(:, 2));
Phase = cell2mat(raw(:, 3));
Z1 = cell2mat(raw(:, 4));
Z2 = cell2mat(raw(:, 5));
Column6 = cell2mat(raw(:, 6));


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

xData = FrequencyHz;
nans = isnan(xData);
xData(nans) = [];
xData = xData*2*pi;
Phase = Phase * -1;
yData = Z.*cos(pi*Phase/180) + 1i*Z.*sin(pi*Phase/180);
yData(nans) = [];

[xData,I] = sort(xData);
yData = yData(I);

model = @(w,Rs,Rp,C) Rs + Rp*(1-1i*w*C*Rp)./(1+(w*C*Rp).^2);

objfcn = @(v) model(xData,v(1),v(2),v(3)) - yData;
objfcn = @(v) abs(model(xData,v(1),v(2),v(3)) - yData);
%opts = optimoptions(@lsqnonlin,'Algorithm','levenberg-marquardt','Display','final','StepTolerance',0,'FunctionTolerance',0,'MaxFunctionEvaluations',70000,'ScaleProblem','jacobian');
opts = optimoptions(@lsqnonlin,'Algorithm','trust-region-reflective','Display','final','StepTolerance',0,'FunctionTolerance',0,'MaxFunctionEvaluations',70000,'MaxIterations',9000);

x0=[20,1e5,20e-9];
[vestimated,resnorm,residuals,exitflag,output] = lsqnonlin(objfcn,x0,[],[],opts);
Rs = vestimated(1)
Rp = vestimated(2)
C = vestimated(3)

figure
semilogx(xData,real(yData),'.',xData,real(model(xData,Rs,Rp,C)),'-')
figure
semilogx(xData,imag(yData),'.',xData,imag(model(xData,Rs,Rp,C)),'-')
